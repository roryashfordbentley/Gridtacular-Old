 ////
// Tools
//
// Helpers and silent grid functions 
////

////
// Map Get Z
//
// usage: map-get-z(map, first-child-key, second-child-key);
////
@function map-get-z($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

////
// Item Width
// 
// Works out the percent width of items (gutters can be 
// any unit but items must always percent bases)
////
@function item-width($number_of_items,$total_items) {
    $single_col_width: 100 / $total_items * 1%;
    @return $single_col_width * $number_of_items;
}

////
// Equivalent Fractions
//
// This function will add additional classes
// to make the grid system more expressive.
// As well as writing 4/12 you can also write 1/3
////
@function equivalent-fractions($numerator,$denominator){
    $fractions: ();
    @for $i from -$numerator through -1{
        @if($numerator % abs($i) == 0 and $denominator % abs($i) == 0){
            $fraction: (abs($i): #{$numerator/abs($i)}-#{$denominator/abs($i)});
            $fractions: map-merge($fractions, $fraction);
        }     
    }
    // return map of all fractions
    @return $fractions;
}

//// 
// At Breakpoint
// 
// A mixin that outputs inline media queries
// Just supply a Sass list as an argument with a min/max
// If there are no min and max values supplied then it 
// doesnt ouput a media query but instead outputs in the global
// scope
////
@mixin at-breakpoint($min,$max:null){
    @if($max == null and $min != null){
        @media (min-width: $min){
            @content;
        }
    } @elseif($min == null and $max == null) {
        @content;
    } @else{
         @media (min-width: $min) and (max-width: $max){
            @content;
        }
    }
}

////
// Span Items
// 
// Outputs the classes that control the width
// and gutter of each grid item. It can also be used on any
// html element as a component of the silent grid system.
////
@mixin span-items($items, $total_items){
    flex-basis: item-width($items,$total_items);
    padding-left: $gutter-width; 
}

////
// Grid
//
// Mixixs responsible for generating the grid
// container and it's modifier classes.
////
@mixin grid($grid_prefix,$gutter){

    #{$grid_prefix}{
        box-sizing: border-box;
        display: -webkit-box;  /* iOS 6-, Safari 3.1-6, BB7 */
        display: -ms-flexbox;  /* IE 10 */
        display: -webkit-flex; /* Safari 6.1+. iOS 7.1+, BB10 */
        display: flex;         /* Current Spec - Firefox, Chrome, Opera */
        margin-left: -$gutter;
        flex-direction: row;
        flex: 0 1 auto;
        flex-wrap: wrap;
    }

    // Float children
    #{$grid_prefix} > * {
        box-sizing: border-box;
        padding-left: $gutter;
        position: relative;
    }
}

////
// Grid [No Gutters]
//
// Grid with no gutters
////
@mixin grid-no-gutter($grid_prefix,$suffix: null){
    #{$grid_prefix}--no-gutter#{$suffix}{
        margin-left: 0;
    }

    // Float children
    #{$grid_prefix}--no-gutter#{$suffix} > * {
        padding-left: 0;
    }
}

////
// Grid [Vertical Align]
//
// Control vertical centering from the 'grid' element
////
@mixin grid-vertical-align($grid_prefix,$suffix: null){
    
    #{$grid_prefix}--v-top#{$suffix}{
        align-items: flex-start;
    }

    #{$grid_prefix}--v-center#{$suffix}{
        align-items: center;
    }

    #{$grid_prefix}--v-bottom#{$suffix}{
        align-items: flex-end;
    }

    #{$grid_prefix}--v-stretch#{$suffix}{
        align-items: stretch;
    }

    #{$grid_prefix}--v-baseline#{$suffix}{
        align-items: stretch;
    }
}

////
// Grid [Justify Content]
//
// Control justification of the items
// depends on rtl/ltr settings
////
@mixin grid-justify-content($grid_prefix,$suffix: null){
    
    #{$grid_prefix}--align-start#{$suffix}{
        justify-content: flex-start;
    }

    #{$grid_prefix}--align-end#{$suffix}{
        justify-content: flex-end;
    }

    #{$grid_prefix}--align-center#{$suffix}{
        justify-content: center;
    }

    #{$grid_prefix}--align-space-between#{$suffix}{
        justify-content: space-between;
    }

    #{$grid_prefix}--align-space-around#{$suffix}{
        justify-content: space-around;
    }
}

////
// Grid [Items]
// 
// Set the grid item widths based on the number of 
// items requested divided by the total number of items.
////
@mixin grid-items($prefix: null, $suffix: null, $items: null){
    // Loop through the total grid items
    @for $i from 1 through $items{
        $css_classes: equivalent-fractions($i,$items);
        $item_class: null;
        
        // Generate classes from Equivilant fractions
        @each $key, $css_class in $css_classes{
            $full_css_class: #{$prefix}#{$css-class}#{$suffix};
            $item_class: $item_class, $full_css_class;
        }
        
        // Output item classes
        #{$item_class}{
            flex-basis: item-width($i,$items);
            // Fix for IE 10/11
            max-width: item-width($i,$items);
        }
    }
}

////
// Grid Item [Fit]
//
// Make items fill a row
////
@mixin grid-item-fit($item_class,$suffix: null){
    #{$item_class}fit#{$suffix}{
        
        -webkit-box-flex: 1 0;   /* OLD - iOS 6-, Safari 3.1-6 */
        -webkit-flex: 1 0;       /* Safari 6.1+. iOS 7.1+, BB10 */
        -ms-flex: 1 0;           /* IE 10 */
        flex: 1 0;               /* NEW, Spec - Firefox, Chrome, Opera */
    }
}

////
// Grid Item [Flex]
//
// Apply display:flex to grid items
// Allows content to span 100% of its container's 
// height
////
@mixin grid-item-flex($item_class,$suffix: null){
    #{$item_class}flex#{$suffix}{
        display: -webkit-box;  /* iOS 6-, Safari 3.1-6, BB7 */
        display: -ms-flexbox;  /* IE 10 */
        display: -webkit-flex; /* Safari 6.1+. iOS 7.1+, BB10 */
        display: flex;         /* Current Spec - Firefox, Chrome, Opera */
    }
}

////
// Grid Item [Push]
//
// Set the push classes that will incrementally indent
// the item by a maximum number of total-items -1
////
@mixin grid-item-push($prefix: null, $suffix: null, $items: null){
    @for $i from 1 through $items - 1{
        $css_classes: equivalent-fractions($i,$items);
        $push_class: null;
        
        @each $key, $css_class in $css_classes{
            $full_css_class: #{$prefix}#{$css_class}#{$suffix};
            $push_class: $push_class, $full_css_class;
        }
        
        #{$push_class}{
            margin-left: item-width($i,$items);
        }
    }
}

////
// Grid Item [Omega]
//
// Align an element to the right potentially 
// taking it out of order.
////
@mixin grid-item-omega($prefix: null, $suffix: null){
    #{$prefix}omega#{$suffix} {
        margin-left: auto;
    }
}

////
// Grid Debug
//
// Should this be abstracted into a plugin?
////
@mixin grid-debug(){
    body:after{
        box-sizing: border-box;
        position: fixed;
        display: block;
        bottom: 10px;
        right: 10px;
        padding: 5px 28px 5px 20px;
        font-size: 12px;
        color: #777;
        //content: "#{$breakpoint_name}";
        border-radius: 3px;
        background-color: #f7f7f7;
        box-shadow: 0 2px 2px rgba(#000,0.3);
        z-index:100000;
    }
}

////
// Grid Debug [Responsive]
//
// Outputs the debug content and colours
// for each breakpoint.
////
@mixin grid-debug-responsive($breakpoint_name,$debug_bg: #000){
    body:after{
        content: "#{$breakpoint_name}";
        background: linear-gradient(
          to right, 
          #f7f7f7, 
          #f7f7f7 90%, 
          $debug_bg 90%, 
          $debug_bg 100%
        );
    }
}

////
// Gridtacular
//
// Takes a map of arguments which
// it uses to generate the grid system
////
@mixin gridtacular($grid_args){
    // Set variable defaults
    $grid_name: "g" !default;
    $grid_prefix: #{'.' + $grid_name} !default;
    $item_name: "g__item--" !default;
    $push: false !default;
    $push_name: "g__push--" !default;
    $omega: true !default;
    $debug_display: false !default;

    @if (map-has-key(map-get($grid_args, config), grid_class) ) {
        $grid_name: map-get-z($grid_args, config, grid_class);
        $grid_prefix: #{'.' + map-get-z($grid_args, config, grid_class)};
    }

    // If item class has been defined
    @if (map-has-key(map-get($grid_args, config), item_class) ) {
        $item_name: map-get-z($grid_args, config, item_class)
    }

    //If push has been defined
    @if (map-has-key(map-get($grid_args, config), push)) {
        $push: map-get-z($grid_args, config, push)
    }

    // If pushclass has been defined 
    @if (map-has-key(map-get($grid_args, config), push_class)) {
        $push_name: map-get-z($grid_args, config, push_class);
    }

    // If omega has been defined
    @if (map-has-key(map-get($grid_args, config), omega)) {
        $omega: map-get-z($grid_args, config, omega);
    }

    // If debug_display has been defined
    @if (map-has-key(map-get($grid_args, config), debug)) {
        $debug_display: map-get-z($grid_args, config, debug);
    }

    // if grid include breakpoint debug box
    @if($debug_display){ 
        @include grid-debug();
    } 

    // Check that there are defined grids
    @if( map-has-key($grid_args, grids )) {
        
        // Grid default values
        $grids: map-get($grid_args, grids);
        $item_prefix: #{'.' + $item_name};
        $push_prefix: #{'.' + $push_name};
        
        @each $grid_name, $grid_map in $grids{

            // Set defaults
            $items:             12 !default;
            $suffix:            null !default;
            $breakpoint_min:    null !default;
            $breakpoint_max:    null !default;
            $gutter:            24px !default;
            $debug_bg:          #000 !default;
            $debug_name:        $grid_name !default;

            // If item class has been defined
            @if ( map-has-key($grid_map, items) ) {
                $items: map-get($grid_map,items);
            } 
            
            // If item class has been defined
            @if ( map-has-key($grid_map, suffix) ) {
                $suffix: map-get($grid_map,suffix)
            }

            // If breakpoint min has been defined
            @if ( map-has-key($grid_map, breakpoint_min) ) {
                $breakpoint_min: map-get($grid_map,breakpoint_min);
            }

            // If breakpoint max has been defined
            @if ( map-has-key($grid_map, breakpoint_max) ) {
                $breakpoint_max: map-get($grid_map,breakpoint_max);
            }

            // If gutter has been defined
            @if ( map-has-key($grid_map, gutter) ) {
                $gutter:  map-get($grid_map,gutter);
            }

            // If debug_bg is defined
            @if ( map-has-key($grid_map, debug_bg) ) {
                $debug_bg:  map-get($grid_map,debug_bg);
            }

            // If debug_name is defined
            @if ( map-has-key($grid_map, debug_name) ) {
                $debug_name:  map-get($grid_map,debug_name);
            }

            // Include the necessary mixins to generate the grids
            @include at-breakpoint($breakpoint_min, $breakpoint_max){
                
                @include grid($grid_prefix,$gutter);
                @include grid-no-gutter($grid_prefix,$suffix);
                @include grid-vertical-align($grid_prefix,$suffix);
                @include grid-justify-content($grid_prefix,$suffix);
                @include grid-item-fit($item_prefix,$suffix);
                @include grid-item-flex($item_prefix,$suffix);
                @include grid-items($item_prefix,$suffix,$items);
                
                @if($push){
                    @include grid-item-push($push_prefix, $suffix, $items);
                }
                
                @if($omega){
                    @include grid-item-omega($item_prefix, $suffix);
                }

                @if($debug_display){ 
                    @include grid-debug-responsive($debug_name,$debug_bg);
                } 
            }
        }
    } @else{
        @error "No Gridtacular grids defined!";
    }
}